
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tkinter import filedialog

plt.rcParams.update({
    'font.family': 'times new roman',
    'xtick.labelsize': 8,
    'ytick.labelsize': 8,
    'axes.labelsize': 10,
    'axes.titlesize': 10,
    'axes.spines.right': False,
    'axes.spines.top': False,
    'figure.dpi': 200,
    'legend.edgecolor': 'white',
    'figure.figsize': [6, 4],
    'figure.autolayout': True})

#edit this for how long each thing occurs within the trial
sample_rate = 10000
stiffness_time:int = 30 * sample_rate
relax_stiff_time:int = 60 * sample_rate

class Error(Exception):
    pass

def ReadFile(File: str = None, model: str = None, test: str = None):
    Subject: str = None
    Fibre: str = None
    Muscle: str = None
    def GetTextData(skiprows: int, columns: dict) -> pd.DataFrame():
        return pd.read_table(
                    File,
                    encoding = 'latin1',
                    header = None,
                    delim_whitespace = True,
                    low_memory = False,
                    on_bad_lines='skip',
                    memory_map = True,
                    skiprows = skiprows,
                    usecols = columns.keys(),
                    names = columns.values())
        

    Filename: str = os.path.basename(File)
    #-----Get characteristic info from filename-----+

    if Filename.__contains__('.dat'):
        Filename: list = Filename.split("_")
        Filename = Filename[0:4]
    else:
        Filename = Filename.split("_")

    #-----Grab info from filename-----+
    print(Filename)
    Subject: str = Filename[0]
    Fibre: int = Filename[1]
    Muscle: str = Filename[2].split('.')[0]

    Data = GetTextData(skiprows = 0, columns = {0: 'Time', 1: 'Length', 2: 'Stim', 3: 'Force'})
    try:
        FibreLength = float(Data['Stim'][10])
        SarcomereLength = float(Data['Force'][11])
        Diameter = float(Data['Length'][12])
        CSA = np.pi*(Diameter/2)**2
    except:
        print(Error(f"Physical characteristics for {File} not calculated correctly. Check text file for weird lines of data at beginning of file."))

#change this to the appropriate start time
    data_start = Data.index[Data['Time'] == '25000.00'][0]
    Data = pd.DataFrame(Data[data_start:], dtype = float).reset_index(drop = True)
    Baseline_force = Data['Force'][1:500].mean()
    Data['Force'] = Data['Force'] - Baseline_force
    Data['Time'] = Data['Time'].div(1000)
            
    return Data, Subject, Muscle, Fibre, FibreLength, SarcomereLength, CSA

def FibreAnalysis(Data: pd.DataFrame = None, Filename: str = None, CSA: float = None, Graph: bool = False) -> tuple[float, float, float, pd.Series, pd.Series, float]:


    def StiffnessAnalysis(Data: pd.DataFrame, stiffness_time: int = stiffness_time):
        StiffnessWindow = range(int(stiffness_time) - 100, int(stiffness_time) + 200)
        ForceWindow = range(int(stiffness_time) - 5001, int(stiffness_time) - 1)
        dF = (Data['Force'][StiffnessWindow]).max() - (Data['Force'][ForceWindow]).mean()
        dLo = (Data['Stim'][StiffnessWindow]).max() - (Data['Stim'][ForceWindow]).mean()
        Strain = ((Data['Stim'][StiffnessWindow]).max() - (Data['Stim'][ForceWindow]).mean())/(Data['Stim'][ForceWindow].mean())
        Stiffness = dF/dLo
        Modulus = (dF/CSA)/Strain


        return Stiffness, Strain, Modulus

    Stiffness, Strain, Modulus = StiffnessAnalysis(Data = Data)
    RStiffness, RStrain, RModulus = StiffnessAnalysis(Data = Data, stiffness_time = relax_stiff_time)
    Peak_force = Data['Force'][200000:210000].mean()
    

    if Graph == True:
        fig = plt.figure()
        
        plt.plot(Data['Time'], Data['Force'], color = 'black', label = 'Raw')
        plt.plot(Data['Time'][200000:210000], Data['Force'][200000:210000], color = 'blue', label = 'Peak')
        plt.plot(Data['Time'][1:500], Data['Force'][1:500], color = 'Yellow', label = 'Baseline')
        plt.ylabel('Force (mN)')
        plt.xlabel('Time (s)')
        plt.text(
            x = 0.5, y = 0.1,
            s = f'Active Specific Force = {(Peak_force/CSA):.2f}',
            transform = plt.gca().transAxes,
            horizontalalignment = 'center',
            verticalalignment = 'center')
        plt.title(Filename)
        plt.legend()
        plt.show()

    return Stiffness, Strain, Modulus, Peak_force, RStiffness, RStrain, RModulus

def main():
    Directory = filedialog.askopenfilenames()
    #Directory = '/Users/keaton.briar/Desktop/Figure/untitled folder'

    AllFiles = []
    for root, subdirs, files in os.walk(Directory):
        for file in files:
            if 'Store' in file:
                continue
            AllFiles.append(os.path.join(root, file))
    AllFiles = sorted(AllFiles)


    final_results = []
    for file in AllFiles:

        Data, Subject, Muscle, Fibre, FibreLength, SarcomereLength, CSA = ReadFile(File = file)
        Stiffness, Strain, Modulus, Peak_force, RStiffness, RStrain, RModulus,  = FibreAnalysis(Data = Data, Filename = os.path.basename(file), CSA=CSA, Graph = True)

        OrganizedData = {
            'Subject': Subject,
            'Muscle': Muscle,
            'Fibre Length': FibreLength,
            'Fibre': Fibre,
            'Sarcomere Length': SarcomereLength,
            'CSA': CSA,
            'Stiffness (pCa 4.5)': Stiffness,
            'Stiffness in Relaxing': RStiffness,
            'Modulus (pCa 4.5)': Modulus,
            'Modulus in Relaxing': RModulus,
            'Normalized Modulus': Modulus - RModulus, 
            'Active Specific Force': Peak_force / CSA}
        
        final_results.append(OrganizedData)
    
    for test in final_results:
        print(test)

    # return Final_results
    return final_results 

#call the main () functio to get final_results
final_results = main()

# your code for generating the final results
for File in final_results:
     excel_results = pd.DataFrame(columns = [key for key in File.keys()])

for idx, results in enumerate(final_results):
    for column, data in results.items():
        excel_results.loc[idx, column] = data

excel_file_path = '/Users/keaton.briar/Desktop/Figure/untitled folder/output3.xlsx'

excel_results.to_excel(excel_file_path, index = False)


if __name__ == "__main__":
    main()